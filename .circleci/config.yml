# SPDX-FileCopyrightText: 2017-2020 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

# NOTE: This configuration is not directly usable in forks as it contains
# Espoo-specific configurations, references to secrets and internal tooling.

version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  owasp: entur/owasp@0.0.15

parameters:
  workspace_root:
    type: string
    default: /home/circleci/repo
  builder_aws_version:
    type: string
    default: bullseye-slim-e2518f5ece6862d780ff4224aad606e13cfe8293
  nodejs_image:
    type: string
    default: cimg/node:14.15
  ecr:
    type: string
    default: 307238562370.dkr.ecr.eu-west-1.amazonaws.com
  cache_e2e_image:
    type: boolean
    default: true

aliases:
  - &workspace_evaka_base << pipeline.parameters.workspace_root >>/evaka-base
  - &workspace_apigw << pipeline.parameters.workspace_root >>/apigw
  - &workspace_frontend << pipeline.parameters.workspace_root >>/frontend
  - &workspace_proxy << pipeline.parameters.workspace_root >>/proxy
  - &workspace_service << pipeline.parameters.workspace_root >>/service
  - &workspace_message_service << pipeline.parameters.workspace_root >>/message-service
  - &workspace_compose << pipeline.parameters.workspace_root >>/compose

  # SSH key fingerprint for checking out other eVaka repositories
  - &ci_evaka_fingerprint 86:d0:b3:3d:aa:fc:d5:b9:6b:69:1e:c7:f5:56:66:aa

  # Version of remote Docker engine used with setup_remote_docker (not including machine executors)
  - &remote_docker_version "20.10.6"
  - &yarn_version '1.22.\*'
  - &shellcheck_image_version v0.7.2
  - &nodejs_image << pipeline.parameters.nodejs_image >>
  - &openjdk_image cimg/openjdk:11.0
  - &ubuntu_machine_image ubuntu-2004:202104-01
  - &builder_aws_core_image 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:core-<< pipeline.parameters.builder_aws_version >>
  - &builder_aws_docker_image 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:docker-<< pipeline.parameters.builder_aws_version >>
  - &builder_aws_terraform_image 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:terraform-<< pipeline.parameters.builder_aws_version >>

  - &default_contexts
    context:
      - voltti-slack
      - voltti-dockerhub
  - &aws_contexts
    context:
      - voltti-slack
      - org-global
  - &aws_docker_contexts
    context:
      - voltti-dockerhub
      - voltti-slack
      - org-global

  - &default_config
    working_directory: << pipeline.parameters.workspace_root >>

  - &node_config
    <<: *default_config
    environment:
      # this makes Playwright download browsers to node_modules/playwright instead of $HOME/.cache/ms-playwright
      PLAYWRIGHT_BROWSERS_PATH: 0

  - &jvm_config
    <<: *default_config
    environment: &jvm_env
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:MaxRAMPercentage=80"'
      GRADLE_USER_HOME: << pipeline.parameters.workspace_root >>/.gradle-user-home
      JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=80"

executors:
  aws_core_executor:
    <<: *default_config
    docker:
      - image: *builder_aws_core_image
  aws_docker_executor:
    <<: *default_config
    docker:
      - image: *builder_aws_docker_image
  aws_terraform_executor:
    <<: *default_config
    docker:
      - image: *builder_aws_terraform_image
  apigw_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  frontend_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  e2e_executor:
    <<: *node_config
    machine:
      image: *ubuntu_machine_image
      resource_class: large
  service_executor:
    <<: *jvm_config
    docker:
      - image: *openjdk_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  service_test_executor:
    <<: *jvm_config
    machine:
      image: *ubuntu_machine_image
      resource_class: large
    environment:
      # YAML anchors don't merge nested keys, so re-referencing is required
      <<: *jvm_env
      # Leave more memory for testcontainers than the default 20%.
      # With large instances, this will still be 7.5GB for Gradle/services.
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-XX:MaxRAMPercentage=50"'
      JAVA_TOOL_OPTIONS: "-XX:MaxRAMPercentage=50"
  shellcheck:
    parameters:
      shellcheck_image_version:
        type: string
        default: *shellcheck_image_version
    docker:
      - image: koalaman/shellcheck-alpine:<< parameters.shellcheck_image_version >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: << pipeline.parameters.workspace_root >>

commands:
  attach_root_workspace:
    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace_root >>

  # Caching commands

  store_repo:
    steps:
      - save_cache:
          name: Store repo
          key: repo-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
  restore_repo:
    steps:
      - restore_cache:
          name: Restore repo
          keys:
            - repo-v1-{{ .Branch }}-{{ .Revision }}

  store_docker_image:
    parameters:
      dir:
        type: string
    steps:
      - save_cache:
          name: Store Docker image in cache
          key: << parameters.dir >>-image-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - << pipeline.parameters.workspace_root >>/<< parameters.dir >>/image.tar
  restore_docker_image:
    parameters:
      dir:
        type: string
    steps:
      - restore_cache:
          name: Restore Docker image from cache
          key: << parameters.dir >>-image-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
      - run: docker load -i << parameters.dir >>/image.tar

  # Artifacts or sub-workspaces would be ideal here but instead we need to
  # abuse CircleCI's caching to store build artifacts and only restore them
  # in specific jobs within a single workflow execution. This avoid wasting time
  # in downstream jobs that don't need the files.
  store_service_artifacts:
    steps:
      - save_cache:
          name: Store build artifacts
          key: service-build-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - << pipeline.parameters.workspace_root >>/service/build/libs/
  restore_service_artifacts:
    steps:
      - restore_cache:
          name: Restore build artifacts
          key: service-build-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
  store_message_service_artifacts:
    steps:
      - save_cache:
          name: Store build artifacts
          key: message-service-build-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - << pipeline.parameters.workspace_root >>/message-service/build/libs/
  restore_message_service_artifacts:
    steps:
      - restore_cache:
          name: Restore build artifacts
          key: message-service-build-v1-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}

  store_apigw_deps:
    steps:
      - save_cache:
          key: yarn-cache-apigw-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "apigw/yarn.lock" }}
          paths:
            - apigw/.yarn/cache
  restore_apigw_deps:
    steps:
      - restore_cache:
          keys:
            - yarn-cache-apigw-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "apigw/yarn.lock" }}
            - yarn-cache-apigw-v1-
            - yarn-cache-apigw-

  store_frontend_deps:
    steps:
      - save_cache:
          key: yarn-cache-frontend-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
          paths:
            - frontend/.yarn/cache
            - frontend/node_modules
            - /home/circleci/.npm/sentry-cli
  restore_frontend_deps:
    steps:
      - restore_cache:
          keys:
            - yarn-cache-frontend-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
            - yarn-cache-frontend-v1-
            - yarn-cache-frontend-

  store_frontend_comm_deps:
    steps:
      - save_cache:
          name: Store commercial dependencies
          key: frontend-comm-deps-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
          paths:
            - frontend/vendor/fortawesome
  restore_frontend_comm_deps:
    steps:
      - restore_cache:
          name: Restore commercial dependencies
          keys:
            - frontend-comm-deps-v1-{{ checksum ".circleci/config.yml" }}-{{ checksum "frontend/yarn.lock" }}
            - frontend-comm-deps-v1-
            - frontend-comm-deps-

  store_service_gradle:
    steps:
      - save_cache:
          name: Store Gradle cache
          key: gradle-home-service-v5-{{ checksum ".circleci/config.yml" }}-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
          paths:
            - service/buildSrc/.gradle
            - service/.gradle
            - service/custom-ktlint-rules/.gradle
            - .gradle-user-home/wrapper
            - .gradle-user-home/caches
            - .gradle-user-home/notifications
  restore_service_gradle:
    steps:
      - restore_cache:
          name: Restore Gradle cache
          keys:
            - gradle-home-service-v5-{{ checksum ".circleci/config.yml" }}-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
            - gradle-home-service-v5-
  store_message_service_gradle:
    steps:
      - save_cache:
          name: Store Gradle cache
          key: gradle-home-message-service-v5-{{ checksum ".circleci/config.yml" }}-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
          paths:
            - message-service/buildSrc/.gradle
            - message-service/.gradle
            - .gradle-user-home/wrapper
            - .gradle-user-home/caches
            - .gradle-user-home/notifications
  restore_message_service_gradle:
    steps:
      - restore_cache:
          name: Restore Gradle cache
          keys:
            - gradle-home-message-service-v5-{{ checksum ".circleci/config.yml" }}-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
            - gradle-home-message-service-v5-

  store_service_build_cache:
    steps:
      - save_cache:
          name: Store build cache
          key: gradle-service-build-cache-v2-{{ .Branch }}-{{ .Revision }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - service/build
            - service/buildSrc/build
            - service/custom-ktlint-rules/build
            - service/vtjclient/build
            - service-lib/build
  restore_service_build_cache:
    steps:
      - restore_cache:
          name: Restore build cache
          keys:
            - gradle-service-build-cache-v2-{{ .Branch }}-{{ .Revision }}-{{ checksum ".circleci/config.yml" }}
            - gradle-service-build-cache-v2-
  store_message_service_build_cache:
    steps:
      - save_cache:
          name: Store build cache
          key: gradle-message-service-build-cache-v2-{{ .Branch }}-{{ .Revision }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - message-service/build
            - message-service/buildSrc/build
            - message-service-lib/build
  restore_message_service_build_cache:
    steps:
      - restore_cache:
          name: Restore build cache
          keys:
            - gradle-message-service-build-cache-v2-{{ .Branch }}-{{ .Revision }}-{{ checksum ".circleci/config.yml" }}
            - gradle-message-service-build-cache-v2-

  # Misc commands

  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    steps:
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - login_docker_hub

  prepare_frontend_build:
    steps:
      - restore_repo
      - restore_frontend_deps
      - restore_frontend_comm_deps
      - run:
          working_directory: *workspace_frontend
          command: yarn install --immutable
      - run:
          name: Unpack commercial frontend dependencies
          working_directory: *workspace_frontend
          command: |
            ./unpack-pro-icons.sh
      - store_frontend_deps

  build_frontend:
    steps:
      - run:
          name: yarn build
          working_directory: *workspace_frontend
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              export SENTRY_PUBLISH_ENABLED=true
            fi

            ICONS=pro yarn build
            ls -lRa ./dist/bundle

  e2e_build:
    parameters:
      test_runner:
        type: enum
        enum:
          - testcafe
          - playwright
    steps:
      - restore_repo
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: false
      - run:
          name: "Setup E2E_IMAGE and store date"
          command: |
            echo 'export E2E_IMAGE="<< pipeline.parameters.ecr >>/evaka/e2e-<< parameters.test_runner >>:latest"' >> $BASH_ENV
            date +%F > date
      - when:
          condition: << pipeline.parameters.cache_e2e_image >>
          steps:
            - restore_cache:
                name: Restore Docker image from cache
                key: << parameters.test_runner >>-daily-v1-{{ checksum "date"}}
            - run:
                name: Build E2E image
                working_directory: *workspace_compose
                command: |
                  docker load -i "<< pipeline.parameters.workspace_root >>/e2e-<< parameters.test_runner >>.tar" || true
                  docker build -t "$E2E_IMAGE" --cache-from "$E2E_IMAGE" -f "./e2e/<< parameters.test_runner >>.Dockerfile" ./e2e/
      - when:
          condition:
            not: << pipeline.parameters.cache_e2e_image >>
          steps:
            - run:
                name: Build and push E2E << parameters.test_runner >> image
                working_directory: *workspace_compose
                command: |
                  ecr-login
                  docker pull "$E2E_IMAGE"
                  docker build -t "$E2E_IMAGE" --cache-from "$E2E_IMAGE" -f "./e2e/<< parameters.test_runner >>.Dockerfile" ./e2e/
                  docker push "$E2E_IMAGE"
      - run:
          name: Package E2E << parameters.test_runner >> image
          working_directory: << pipeline.parameters.workspace_root >>
          command: |
            docker save "$E2E_IMAGE" > "e2e-<< parameters.test_runner >>.tar"
      - save_cache:
          name: Store Docker image in cache
          key: << parameters.test_runner >>-image-v2-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
          paths:
            - "e2e-<< parameters.test_runner >>.tar"
      - save_cache:
          name: Store Docker image in daily cache
          key: << parameters.test_runner >>-daily-v1-{{ checksum "date"}}
          paths:
            - "e2e-<< parameters.test_runner >>.tar"
      - notify_slack

  e2e_test:
    parameters:
      yarn_version:
        type: string
        default: *yarn_version
      test_runner:
        type: enum
        enum:
          - testcafe
          - playwright
    steps:
      - restore_repo
      - attach_root_workspace
      - restore_docker_image:
          dir: apigw
      - restore_docker_image:
          dir: service
      - login_docker_hub
      - run:
          name: Start up compose stack
          working_directory: *workspace_compose
          command: |
            docker-compose build
            CI=true LOCAL_DIR='../frontend' ./compose-e2e up -d
      - restore_frontend_deps
      - restore_frontend_comm_deps
      - restore_cache:
          name: Restore Docker image from cache
          key: << parameters.test_runner >>-image-v2-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
      - run:
          name: Load E2E image
          command: |
            docker load -i "<< pipeline.parameters.workspace_root >>/e2e-<< parameters.test_runner >>.tar"
      - run:
          name: Run E2E tests against compose inside a docker-compose
          working_directory: << pipeline.parameters.workspace_root >>
          command: |
            CI=true ./bin/circleci-e2e.sh << parameters.test_runner >>
      - run:
          name: Collect docker-compose logs
          working_directory: *workspace_compose
          command: ./compose-e2e logs --tail=all > /tmp/docker-compose-logs.txt
          when: always
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_artifacts:
          path: frontend/screenshots
          destination: screenshots
      - store_artifacts:
          path: frontend/videos
          destination: videos
      - store_test_results:
          path: frontend/test-results

  deploy_frontend:
    parameters:
      target_env:
        type: string
    steps:
      - run:
          name: Configure AWS CLI
          command: replace-credentials
      - deploy_s3:
          target_env: << parameters.target_env >>
          from: "frontend/citizen/${CIRCLE_SHA1}"
          to: citizen
      - deploy_s3:
          target_env: << parameters.target_env >>
          from: "frontend/employee/${CIRCLE_SHA1}"
          to: employee
      - deploy_s3:
          target_env: << parameters.target_env >>
          from: "frontend/employee/mobile/${CIRCLE_SHA1}"
          to: employee/mobile
      - deploy_s3:
          target_env: << parameters.target_env >>
          from: "frontend/maintenance-page/${CIRCLE_SHA1}"
          to: maintenance-page

  install_frontend:
    parameters:
      target_env:
        type: string
    steps:
      - attach_root_workspace
      - run:
          name: Configure AWS CLI
          command: replace-credentials
      - copy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/citizen-frontend
          to: "frontend/citizen/${CIRCLE_SHA1}"
      - copy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-frontend
          to: "frontend/employee/${CIRCLE_SHA1}"
      - copy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/dist/bundle/employee-mobile-frontend
          to: "frontend/employee/mobile/${CIRCLE_SHA1}"
      - copy_to_s3:
          target_env: << parameters.target_env >>
          from: frontend/src/maintenance-page-frontend
          to: "frontend/maintenance-page/${CIRCLE_SHA1}"

  copy_to_s3:
    parameters:
      target_env:
        type: string
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Install (<< parameters.from >>)
          working_directory: << pipeline.parameters.workspace_root >>/<< parameters.from >>
          command: |
            if [ "<< parameters.target_env >>" = "prod" ]; then
              echo 'Target environment is prod, excluding source maps from deploy'
              EXTRA_ARGS=(
                '--exclude' '*.map'
              )
            fi

            aws s3 sync . s3://evaka-static-<< parameters.target_env >>/<< parameters.to >> \
              --acl public-read \
              --exact-timestamps \
              "${EXTRA_ARGS[@]}" \
              --profile voltti-<< parameters.target_env >>

  deploy_s3:
    parameters:
      target_env:
        type: string
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Deploy (<< parameters.from >>)
          command: |
            aws s3 cp s3://evaka-static-<< parameters.target_env >>/<< parameters.from >>/index.html \
                s3://evaka-static-<< parameters.target_env >>/<< parameters.to >>/index.html \
              --acl public-read \
              --profile voltti-<< parameters.target_env >>

            aws s3 sync s3://evaka-static-<< parameters.target_env >>/<< parameters.from >> \
                s3://evaka-static-<< parameters.target_env >>/<< parameters.to >> \
              --acl public-read \
              --exact-timestamps \
              --exclude "*index.html" \
              --profile voltti-<< parameters.target_env >>

  load_base_image:
    steps:
      - run:
          name: Load base image
          working_directory: << pipeline.parameters.workspace_root >>
          command: docker load -i evaka-base.tar

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      save_image:
        type: boolean
        default: false
    steps:
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker build \
              -t << parameters.image >> \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - run:
          name: Push docker image
          command: |
            ecr-login
            ecr-push << parameters.image >>
      - run:
          name: Save docker image
          working_directory: << parameters.dir >>
          command: docker save << parameters.image >> > image.tar

  push_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
    steps:
      - run:
          name: Load docker image
          working_directory: << parameters.dir >>
          command: docker load -i image.tar
      - run:
          name: Push docker image
          command: |
            ecr-login
            ecr-push << parameters.image >>

  deploy_services:
    parameters:
      env:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - attach_root_workspace
      - run:
          name: Initialize Terraform workspace
          working_directory: evaka-infra/terraform/evaka-ecs
          command: |
            . replace-credentials

            terraform init
            terraform workspace select << parameters.env >>
      - run:
          name: Log current ECS service versions
          working_directory: evaka-infra/terraform/evaka-ecs
          command: |
            . replace-credentials

            terraform output | grep _version
      - run:
          name: Deploy ECS services to << parameters.env >>
          working_directory: evaka-infra/terraform/evaka-ecs
          command: |
            . replace-credentials

            terraform apply -auto-approve -lock-timeout=300s \
              -var enduser-api-gw_version="${CIRCLE_SHA1}" \
              -var internal-api-gw_version="${CIRCLE_SHA1}" \
              -var evaka-srv_version="${CIRCLE_SHA1}" \
              -var message-srv_version="${CIRCLE_SHA1}" \
              -var proxy_version="${CIRCLE_SHA1}" \
              -var ses-notification-processor_version="${CIRCLE_SHA1}"
      - run:
          name: Wait for ECS deploy to finish
          environment:
            AWS_PROFILE: voltti-<< parameters.env >>
          command: |
            . replace-credentials

            aws ecs wait services-stable \
              --cluster voltti-ecs-cluster-<< parameters.env >> \
              --services \
                  evaka-enduser-gw \
                  evaka-internal-gw \
                  evaka-srv \
                  evaka-message-srv \
                  evaka-proxy || {
              echo 'ERROR: Deployment failed! At least one of the ECS tasks failed to stabilize in 10 minutes with the new versions.' &&
              echo 'INFO: See output above for previous versions' &&
              echo "WARN: Generally rollbacks aren't recommended as they can cause issues with DB migrations" &&
              exit 1
            }

  # Must be the last step in a job
  notify_slack:
    description: "Notify via Slack"
    steps:
      - slack/notify:
          branch_pattern: master
          channel: ci
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": { "type": "mrkdwn", "text": ":red_circle: Job *${CIRCLE_JOB}* has failed" },
                  "fields": [
                    { "type": "mrkdwn", "text": "*Project*:\n${CIRCLE_PROJECT_REPONAME}" },
                    { "type": "mrkdwn", "text": "*Commiter*:\n${CIRCLE_USERNAME}" }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [ { "type": "button", "text": { "type": "plain_text", "text": "View Job" }, "url": "${CIRCLE_BUILD_URL}" } ]
                }
              ]
            }

jobs:
  # MISC JOBS

  checkout_repo:
    executor: apigw_executor
    steps:
      - checkout
      - store_repo
      - notify_slack

  fetch_private_dependencies:
    executor: aws_core_executor
    steps:
      - restore_repo
      - restore_frontend_comm_deps
      - run: replace-credentials
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_frontend
          command: |
            ./init-pro-icons.sh
      - store_frontend_comm_deps
      - notify_slack

  clone_infra_repo:
    executor: aws_terraform_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - attach_root_workspace
      - run: git clone git@github.com:espoon-voltti/evaka-infra.git
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - evaka-infra
      - notify_slack

  lint_scripts:
    executor: shellcheck
    steps:
      - restore_repo
      - run:
          name: Install dependencies
          command: apk add curl jq git
      - run:
          name: Lint shell scripts
          command: |
            ./bin/run-shellcheck.sh
      - notify_slack

  # BUILD JOBS

  build_base_image:
    executor: apigw_executor
    steps:
      - restore_repo
      - setup_authenticated_remote_docker
      - run:
          name: Build base image
          working_directory: << pipeline.parameters.workspace_root >>/evaka-base
          command: ./build.sh
      - run:
          name: Save base image
          working_directory: << pipeline.parameters.workspace_root >>
          command: docker save evaka-base > evaka-base.tar
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - evaka-base.tar
      - notify_slack

  apigw_build_and_test:
    executor: apigw_executor
    steps:
      - restore_repo
      - restore_apigw_deps
      - run:
          working_directory: *workspace_apigw
          command: yarn install --immutable
      - store_apigw_deps
      - run:
          working_directory: *workspace_apigw
          command: yarn build
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - apigw/dist
      - run:
          working_directory: *workspace_apigw
          command: yarn lint
      - run:
          working_directory: *workspace_apigw
          command: yarn test-ci
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/apigw/build/test-reports
      - notify_slack

  apigw_build_and_push_image:
    executor: aws_docker_executor
    steps:
      - restore_repo
      - attach_root_workspace
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - load_base_image
      - build_docker_image:
          image: evaka/api-gateway
          dir: *workspace_apigw
          save_image: true
      - store_docker_image:
          dir: apigw
      - notify_slack

  frontend_build_core:
    executor: frontend_executor
    steps:
      - prepare_frontend_build
      - build_frontend
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - frontend/dist
      - notify_slack

  frontend_build_misc_and_test:
    executor: frontend_executor
    steps:
      - prepare_frontend_build
      - run:
          working_directory: *workspace_frontend
          command: yarn lint-strict
      - run:
          working_directory: *workspace_frontend
          command: yarn type-check
      - run:
          working_directory: *workspace_frontend
          command: yarn test --maxWorkers=2
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_root >>
          paths:
            - frontend/src/maintenance-page-frontend
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/frontend/test-results
      - notify_slack

  # E2E JOBS

  e2e-build-testcafe:
    executor: aws_docker_executor
    steps:
      - e2e_build:
          test_runner: testcafe
      - notify_slack

  e2e-build-playwright:
    executor: aws_docker_executor
    steps:
      - e2e_build:
          test_runner: playwright
      - notify_slack

  e2e-test-testcafe:
    executor: e2e_executor
    parallelism: 8
    steps:
      - e2e_test:
          test_runner: testcafe
      - notify_slack

  e2e-test-playwright:
    executor: e2e_executor
    parallelism: 4
    steps:
      - e2e_test:
          test_runner: playwright
      - notify_slack

  # DEPLOY JOBS

  services_deploy:
    executor: aws_terraform_executor
    parameters:
      target_env:
        type: string
    steps:
      - deploy_services:
          env: << parameters.target_env >>
      - notify_slack

  frontend_deploy:
    executor: aws_core_executor
    parameters:
      target_env:
        type: string
    steps:
      - install_frontend:
          target_env: << parameters.target_env >>
      - deploy_frontend:
          target_env: << parameters.target_env >>
      - notify_slack

  proxy_build_and_push_image:
    executor: aws_docker_executor
    steps:
      - restore_repo
      - setup_authenticated_remote_docker
      - run:
          name: Test proxy image configuration
          working_directory: *workspace_proxy
          command: |
            docker build \
              -t smoketest-evaka-proxy \
              -f smoketest.Dockerfile \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - build_docker_image:
          image: evaka/proxy
          dir: *workspace_proxy
      - notify_slack

  service_build:
    executor: service_executor
    steps:
      - restore_repo
      - restore_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew assemble compileIntegrationTestKotlin
      - store_service_artifacts
      - run:
          working_directory: *workspace_service
          command: |
            cd custom-ktlint-rules
            ./gradlew assemble
      - store_service_gradle
      - store_service_build_cache
      - run:
          working_directory: *workspace_service
          command: ./gradlew lintKotlin
      - run:
          working_directory: *workspace_service
          command: ./gradlew codegenCheck
      - run:
          working_directory: *workspace_service
          command: ./circle-check-migrations.sh
      - owasp/generate_cache_keys:
          cache_key: gradle-v1-cache-key
      - owasp/restore_owasp_cache:
          cache_key: gradle-v1-cache-key
      - run:
          name: Update OWASP Dependency-Check Database
          working_directory: *workspace_service
          command: ./gradlew dependencyCheckUpdate
      - owasp/store_owasp_cache:
          cve_data_directory: << pipeline.parameters.workspace_root >>/.gradle-user-home/dependency-check-data
          cache_key: gradle-v1-cache-key
      - run:
          name: Run OWASP Dependency-Check Analyzer
          working_directory: *workspace_service
          command: ./gradlew dependencyCheckAnalyze
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - notify_slack

  service_build_and_push_image:
    executor: aws_docker_executor
    steps:
      - restore_repo
      - attach_root_workspace
      - restore_service_artifacts
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - run:
          name: Unzip executable
          working_directory: *workspace_service
          command: unzip -q build/libs/evaka-service-boot.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/service
          dir: << pipeline.parameters.workspace_root >>/service
          save_image: true
      - store_docker_image:
          dir: service
      - notify_slack

  service_test:
    executor: service_executor
    steps:
      - restore_repo
      - restore_service_gradle
      - restore_service_build_cache
      - run:
          name: gradle test
          working_directory: *workspace_service
          command: ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/build/test-results/test/
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/test-results/test/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - run:
          working_directory: *workspace_service
          name: gradle custom-ktlint-rules test
          command: |
            cd custom-ktlint-rules
            ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/custom-ktlint-rules/build/test-results/test/
      - notify_slack

  service_integration_test:
    executor: service_test_executor
    parallelism: 8
    steps:
      - restore_repo
      - restore_service_gradle
      - restore_service_build_cache
      - login_docker_hub
      - run:
          name: gradle integrationTest
          working_directory: *workspace_service
          command: |
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob \
                "src/integrationTest/kotlin/**/*{Test,Tests}.kt" \
                "../service-lib/src/integrationTest/kotlin/**/*{Test,Tests}.kt" \
                | sed 's/.*src\/integrationTest\/kotlin\///' \
                | sed 's@/@.@g' \
                | sed 's/.kt//' \
                | sort -h \
                | circleci tests split --split-by=timings --timings-type=classname)
            # Format the arguments for Gradle
            GRADLE_ARGS=$(echo "$CLASSNAMES" | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo -e "Prepared arguments for Gradle:\n$GRADLE_ARGS"
            ./gradlew integrationTest $GRADLE_ARGS
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service/build/test-results/integrationTest/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - notify_slack

  message_service_build:
    executor: service_executor
    steps:
      - restore_repo
      - restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew assemble compileIntegrationTestKotlin
      - store_message_service_artifacts
      - store_message_service_gradle
      - store_message_service_build_cache
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew lintKotlin
      - owasp/generate_cache_keys:
          cache_key: gradle-v1-cache-key
      - owasp/restore_owasp_cache:
          cache_key: gradle-v1-cache-key
      - run:
          name: Update OWASP Dependency-Check Database
          working_directory: *workspace_message_service
          command: ./gradlew dependencyCheckUpdate
      - owasp/store_owasp_cache:
          cve_data_directory: << pipeline.parameters.workspace_root >>/.gradle-user-home/dependency-check-data
          cache_key: gradle-v1-cache-key
      - run:
          name: Run OWASP Dependency-Check Analyzer
          working_directory: *workspace_message_service
          command: ./gradlew dependencyCheckAnalyze
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/message-service/build/reports/
      - notify_slack

  message_service_test:
    executor: service_executor
    steps:
      - restore_repo
      - restore_message_service_gradle
      - restore_message_service_build_cache
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew test
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/message-service/build/test-results/test/
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/test-results/test/
      - notify_slack

  message_service_integration_test:
    executor: service_test_executor
    steps:
      - restore_repo
      - restore_message_service_gradle
      - restore_message_service_build_cache
      - login_docker_hub
      - run:
          name: gradle integrationTest
          working_directory: *workspace_message_service
          command: ./gradlew integrationTest
      - store_test_results:
          path: << pipeline.parameters.workspace_root >>/message-service/build/test-results/integrationTest/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/message-service/build/reports/
      - store_artifacts:
          path: << pipeline.parameters.workspace_root >>/service-lib/build/reports/
      - notify_slack

  message_service_build_and_push_image:
    executor: aws_docker_executor
    steps:
      - restore_repo
      - attach_root_workspace
      - restore_message_service_artifacts
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - run:
          name: Unzip executable
          working_directory: *workspace_message_service
          command: unzip -q build/libs/evaka-message-service.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/message-service
          dir: *workspace_message_service
      - notify_slack

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_repo:
          <<: *default_contexts
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              # Currently ALL jobs require secrets -> stop already at checkout for forks
              ignore: /pull\/[0-9]+/
      - fetch_private_dependencies:
          <<: *aws_contexts
          requires:
            - checkout_repo
      - lint_scripts:
          <<: *default_contexts
          requires:
            - checkout_repo
      - build_base_image:
          <<: *default_contexts
          requires:
            - checkout_repo

      - apigw_build_and_test:
          <<: *default_contexts
          requires:
            - checkout_repo
      - apigw_build_and_push_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - apigw_build_and_test

      - frontend_build_core:
          <<: *aws_docker_contexts
          requires:
            - fetch_private_dependencies
      - frontend_build_misc_and_test:
          <<: *default_contexts
          requires:
            - fetch_private_dependencies

      - e2e-build-testcafe:
          <<: *aws_docker_contexts
          requires:
            - checkout_repo
      - e2e-build-playwright:
          <<: *aws_docker_contexts
          requires:
            - checkout_repo
      - e2e-test-testcafe:
          <<: *default_contexts
          requires:
            - e2e-build-testcafe
            - frontend_build_core
            - apigw_build_and_push_image
            - service_build_and_push_image
      - e2e-test-playwright:
          <<: *default_contexts
          requires:
            - e2e-build-playwright
            - frontend_build_core
            - apigw_build_and_push_image
            - service_build_and_push_image

      - proxy_build_and_push_image:
          context:
            - org-global
            - voltti-dockerhub
            - voltti-slack
          requires:
            - checkout_repo

      - service_build:
          <<: *default_contexts
          requires:
            - checkout_repo
      - service_build_and_push_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - service_build
      - service_test:
          <<: *default_contexts
          requires:
            - service_build
      - service_integration_test:
          <<: *default_contexts
          requires:
            - service_build

      - message_service_build:
          <<: *default_contexts
          requires:
            - checkout_repo
      - message_service_test:
          <<: *default_contexts
          requires:
            - message_service_build
      - message_service_integration_test:
          <<: *default_contexts
          requires:
            - message_service_build
      - message_service_build_and_push_image:
          <<: *aws_contexts
          requires:
            - build_base_image
            - message_service_test
            - message_service_integration_test

      - clone_infra_repo:
          <<: *aws_contexts
          requires:
            - lint_scripts
            - frontend_build_misc_and_test
            - e2e-test-testcafe
            - e2e-test-playwright
            - apigw_build_and_push_image
            - proxy_build_and_push_image
            - service_build_and_push_image
            - message_service_build_and_push_image
          filters:
            branches:
              only: master

      - services_deploy:
          <<: *aws_contexts
          name: services_deploy_<< matrix.target_env >>
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
          matrix:
            parameters:
              target_env: [dev, test]

      - frontend_approve_dev_deploy_branch:
          type: approval
          requires:
            - lint_scripts
            - frontend_build_misc_and_test
            - e2e-test-testcafe
            - e2e-test-playwright
            - apigw_build_and_push_image
            - proxy_build_and_push_image
            - service_build_and_push_image
            - message_service_build_and_push_image
          filters:
            branches:
              ignore: master

      - clone_infra_repo:
          <<: *aws_contexts
          name: clone_infra_repo_branch
          requires:
            - frontend_approve_dev_deploy_branch
          filters:
            branches:
              ignore: master

      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_dev_branch
          requires:
            - clone_infra_repo_branch
          filters:
            branches:
              ignore: master
          target_env: dev

      - services_deploy:
          <<: *aws_contexts
          name: services_deploy_dev_branch
          requires:
            - clone_infra_repo_branch
          filters:
            branches:
              ignore: master
          target_env: dev

      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_<< matrix.target_env >>
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
          matrix:
            parameters:
              target_env: [dev, test]
      - frontend_approve_staging_deploy:
          type: approval
          requires:
            - services_deploy_test
            - frontend_deploy_test
          filters:
            branches:
              only: master
      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_staging
          requires:
            - frontend_approve_staging_deploy
          filters:
            branches:
              only: master
          target_env: staging
      - frontend_approve_prod_deploy:
          type: approval
          requires:
            - frontend_deploy_staging
          filters:
            branches:
              only: master
      - frontend_deploy:
          <<: *aws_contexts
          name: frontend_deploy_prod
          requires:
            - frontend_approve_prod_deploy
          filters:
            branches:
              only: master
          target_env: prod
