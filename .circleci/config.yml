# SPDX-FileCopyrightText: 2017-2020 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

# NOTE: This configuration is not directly usable in forks as it contains
# Espoo-specific configurations, references to secrets and internal tooling.

version: 2.1

orbs:
  slack: circleci/slack@3.4.2

aliases:
  - &workspace_root /home/circleci/repo
  - &workspace_evaka_base /home/circleci/repo/evaka-base
  - &workspace_apigw /home/circleci/repo/apigw
  - &workspace_frontend /home/circleci/repo/frontend
  - &workspace_e2e /home/circleci/repo/frontend/e2e-test
  - &workspace_proxy /home/circleci/repo/proxy
  - &workspace_service /home/circleci/repo/service
  - &workspace_message_service /home/circleci/repo/message-service
  - &workspace_compose /home/circleci/repo/compose
  - &yarn_cache .yarn_cache
  # SSH key fingerprint for checking out other eVaka repositories
  - &ci_evaka_fingerprint 86:d0:b3:3d:aa:fc:d5:b9:6b:69:1e:c7:f5:56:66:aa
  # Version of remote Docker engine used with setup_remote_docker (not including machine executors)
  - &remote_docker_version '19.03.13'
  - &yarn_version '1.22.\*'
  - &nodejs_image cimg/node:14.15
  - &openjdk_image cimg/openjdk:11.0
  - &ubuntu_machine_image ubuntu-2004:202010-01
  - &builder_aws_image 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:1a7e0dec664ec27fa49d3eb76992be870c3f5b99

  - &default_config
    working_directory: *workspace_root

  - &node_config
    <<: *default_config
    environment:
      YARN_CACHE_FOLDER: *yarn_cache

  - &jvm_config
    <<: *default_config
    environment:
      GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2048m"'
      _JAVA_OPTIONS: "-Xmx2048m"

  - &restore_repo
    restore_cache:
      keys:
        - repo-v1-{{ .Branch }}-{{ .Revision }}

  - &store_repo
    save_cache:
      key: repo-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - .

  - &restore_apigw_node_modules
    restore_cache:
      keys:
        - node-modules-apigw-v3-{{ checksum "apigw/yarn.lock" }}
        - node-modules-apigw-v3-
        - node-modules-apigw-

  - &store_apigw_node_modules
    save_cache:
      key: node-modules-apigw-v3-{{ checksum "apigw/yarn.lock" }}
      paths:
        - apigw/node_modules

  - &restore_frontend_node_modules
    restore_cache:
      keys:
        - node-modules-frontend-v3-{{ checksum "frontend/yarn.lock" }}
        - node-modules-frontend-v3-
        - node-modules-frontend-

  - &store_frontend_node_modules
    save_cache:
      key: node-modules-frontend-v3-{{ checksum "frontend/yarn.lock" }}
      paths:
        - frontend/packages/enduser-frontend/node_modules
        - frontend/packages/employee-frontend/node_modules
        - frontend/packages/lib-common/node_modules
        - frontend/packages/maintenance-page/node_modules
        - frontend/e2e-test/node_modules
        - frontend/node_modules

  - &restore_service_gradle
    restore_cache:
      keys:
        - gradle-home-service-v3-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
        - gradle-home-service-v3-
        - gradle-home-service-

  - &store_service_gradle
    save_cache:
      key: gradle-home-service-v3-{{ checksum "service/build.gradle.kts" }}-{{ checksum "service/gradle.properties" }}-{{ checksum "service/settings.gradle.kts" }}-{{ checksum "service/buildSrc/build.gradle.kts" }}-{{ checksum "service/buildSrc/src/main/kotlin/Version.kt" }}
      paths:
        - service/.gradle
        - service/.gradle-user-home

  - &restore_message_service_gradle
    restore_cache:
      keys:
        - gradle-home-message-service-v3-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
        - gradle-home-message-service-v3-
        - gradle-home-message-service-

  - &store_message_service_gradle
    save_cache:
      key: gradle-home-message-service-v3-{{ checksum "message-service/build.gradle.kts" }}-{{ checksum "message-service/gradle.properties" }}-{{ checksum "message-service/settings.gradle.kts" }}
      paths:
        - message-service/.gradle
        - message-service/.gradle-user-home

  - &attach_workspace
    attach_workspace:
      at: *workspace_root

  - &persist_workspace_apigw
    persist_to_workspace:
      root: *workspace_root
      paths:
        - apigw/dist
        - *yarn_cache

  - &persist_workspace_frontend
    persist_to_workspace:
      root: *workspace_root
      paths:
        - frontend/packages/enduser-frontend/dist
        - frontend/packages/employee-frontend/dist
        - frontend/packages/maintenance-page/dist
        - frontend/packages/employee-frontend/storybook-build
        - frontend/e2e-test/dist
        - frontend/e2e-test/scripts
        - *yarn_cache

  - &persist_workspace_service
    persist_to_workspace:
      root: *workspace_root
      paths:
        - service/build

  - &persist_workspace_message_service
    persist_to_workspace:
      root: *workspace_root
      paths:
        - message-service/build

  - &deploy_frontend
    executor: aws_executor
    working_directory: *workspace_root
    steps:
      - *attach_workspace
      - run:
          name: Configure AWS CLI
          command: replace-credentials
      - deploy_to_s3:
          from: frontend/packages/enduser-frontend
          to: application
      - deploy_to_s3:
          from: frontend/packages/employee-frontend
          to: employee
      - deploy_to_s3:
          from: frontend/packages/maintenance-page
          to: maintenance-page
      - storybook_to_s3
      - notify_slack

executors:
  aws_executor:
    <<: *default_config
    docker:
      - image: *builder_aws_image
  apigw_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  frontend_executor:
    <<: *node_config
    docker:
      - image: *nodejs_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  e2e_executor:
    <<: *default_config
    machine:
      image: *ubuntu_machine_image
      docker_layer_caching: true
      resource_class: large
  service_executor:
    <<: *jvm_config
    environment:
      GRADLE_USER_HOME: /home/circleci/repo/service/.gradle-user-home
    docker:
      - image: *openjdk_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  service_test_executor:
    <<: *jvm_config
    environment:
      GRADLE_USER_HOME: /home/circleci/repo/service/.gradle-user-home
    machine:
      image: *ubuntu_machine_image
      resource_class: large
  message_service_executor:
    <<: *jvm_config
    environment:
      GRADLE_USER_HOME: /home/circleci/repo/message-service/.gradle-user-home
    docker:
      - image: *openjdk_image
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
  message_service_test_executor:
    <<: *jvm_config
    environment:
      GRADLE_USER_HOME: /home/circleci/repo/message-service/.gradle-user-home
    machine:
      image: *ubuntu_machine_image

commands:
  login_docker_hub:
    description: Log in to Docker Hub for authenticated pulls
    steps:
      - run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

  setup_authenticated_remote_docker:
    description: Setup remote Docker execution environment with Docker Hub authentication
    steps:
      - setup_remote_docker:
          version: *remote_docker_version
          docker_layer_caching: true
      - login_docker_hub

  build_frontend:
    parameters:
      dir:
        type: string
    steps:
      - run:
          name: yarn build << parameters.dir >>
          working_directory: << parameters.dir >>
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              export SENTRY_PUBLISH_ENABLED=true
            fi

            ICONS=pro yarn build
            ls -lRa ./dist

  build_storybook:
    steps:
      - run:
          name: yarn build-storybook /home/circleci/repo/frontend/packages/employee-frontend
          working_directory: /home/circleci/repo/frontend/packages/employee-frontend
          environment:
            SENTRY_NO_PROGRESS_BAR: "1"
          command: |
            ICONS=pro yarn build-storybook
            ls -lRa ./storybook-build

  e2e_test:
    parameters:
      suite:
        type: string
      yarn_version:
        type: string
        default: *yarn_version
    steps:
      - *restore_repo
      - *attach_workspace
      - run:
          name: Load docker images
          command: |
            docker load -i apigw/image.tar
            docker load -i service/image.tar
      - login_docker_hub
      - run:
          name: Start up compose stack
          working_directory: *workspace_compose
          command: |
            CI=true LOCAL_DIR='../frontend/packages' ./compose-e2e up -d
      - run:
          name: Install Node.js and yarn
          command: |
            export DEBIAN_FRONTEND=noninteractive
            nvm install
            node --version

            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get --yes install --no-install-recommends yarn=<< parameters.yarn_version >>
            yarn --version
      - run:
          name: Install chrome
          command: |
            curl --silent --show-error --location --fail --retry 3 --output /tmp/google-chrome-stable_current_amd64.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
              && (sudo dpkg -i /tmp/google-chrome-stable_current_amd64.deb || sudo apt-get -fy install)  \
              && rm -rf /tmp/google-chrome-stable_current_amd64.deb \
              && sudo sed -i 's|HERE/chrome"|HERE/chrome" --disable-setuid-sandbox --no-sandbox|g' \
                  "/opt/google/chrome/google-chrome" \
              && google-chrome --version
            CHROME_VERSION="$(google-chrome --version)" \
              && export CHROMEDRIVER_RELEASE="$(echo $CHROME_VERSION | sed 's/^Google Chrome //')" && export CHROMEDRIVER_RELEASE=${CHROMEDRIVER_RELEASE%%.*} \
              && CHROMEDRIVER_VERSION=$(curl --silent --show-error --location --fail --retry 4 --retry-delay 5 http://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROMEDRIVER_RELEASE}) \
              && curl --silent --show-error --location --fail --retry 4 --retry-delay 5 --output /tmp/chromedriver_linux64.zip "http://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip" \
              && cd /tmp \
              && unzip chromedriver_linux64.zip \
              && rm -rf chromedriver_linux64.zip \
              && sudo mv chromedriver /usr/local/bin/chromedriver \
              && sudo chmod +x /usr/local/bin/chromedriver \
              && chromedriver --version
      - *restore_frontend_node_modules
      - run:
          name: Run e2e tests against compose
          working_directory: *workspace_e2e
          command: |
            nvm use
            ./wait-for-dev-api.sh 'http://localhost:9999' || (cd /home/circleci/repo/compose && ./compose-e2e logs && false)
            yarn << parameters.suite >>
      - run:
          name: Collect error logs
          command: |
            cd /home/circleci/repo/compose
            ./compose-e2e logs --tail=all > /tmp/docker-compose-logs.txt
          when: on_fail
      - store_artifacts:
          path: /tmp/docker-compose-logs.txt
          destination: docker-compose-logs.txt
      - store_artifacts:
          path: frontend/e2e-test/screenshots
          destination: screenshots
      - store_test_results:
          path: frontend/e2e-test/test-results

  deploy_to_s3:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - run:
          name: Deploy (<< parameters.from >>)
          working_directory: /home/circleci/repo/<< parameters.from >>
          command: |
            aws s3 cp dist/index.html s3://evaka-static-$TARGET_ENV/<< parameters.to >>/index.html \
              --acl public-read \
              --profile voltti-$TARGET_ENV

            if [ "$TARGET_ENV" = "prod" ]; then
              echo 'Target environment is prod, excluding source maps from deploy'
              EXTRA_ARGS=(
                '--exclude' '*.map'
              )
            fi

            aws s3 sync dist s3://evaka-static-$TARGET_ENV/<< parameters.to >> \
              --acl public-read \
              --exact-timestamps \
              --exclude "*index.html" \
              "${EXTRA_ARGS[@]}" \
              --profile voltti-$TARGET_ENV

  storybook_to_s3:
    steps:
      - run:
          name: Deploy Storybook
          working_directory: /home/circleci/repo/frontend/packages/employee-frontend
          command: |
            if [ "$TARGET_ENV" = "dev" ]; then
              aws --profile voltti-dev s3 cp storybook-build/ s3://evaka-static-dev/master/storybook/ --recursive --acl public-read
            fi

  load_base_image:
    steps:
      - run:
          name: Load base image
          working_directory: *workspace_root
          command: docker load -i evaka-base.tar

  build_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
      push_after:
        type: boolean
        default: false
    steps:
      - run:
          name: Build docker image
          working_directory: << parameters.dir >>
          command: |
            docker build \
              -t << parameters.image >> \
              --build-arg "build=${CIRCLE_BUILD_NUM}" \
              --build-arg "commit=${CIRCLE_SHA1}" \
              .
      - when:
          condition: << parameters.push_after >>
          steps:
            - run:
                name: Push docker image
                command: |
                  ecr-login
                  ecr-push << parameters.image >>
      - unless:
          condition: << parameters.push_after >>
          steps:
            - run:
                name: Save docker image
                working_directory: << parameters.dir >>
                command: docker save << parameters.image >> > image.tar

  push_docker_image:
    parameters:
      image:
        type: string
      dir:
        type: string
    steps:
      - run:
          name: Load docker image
          working_directory: << parameters.dir >>
          command: docker load -i image.tar
      - run:
          name: Push docker image
          command: |
            ecr-login
            ecr-push << parameters.image >>

  deploy_services:
    parameters:
      env:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - *attach_workspace
      - run:
          name: Deploy ECS services to << parameters.env >>
          command: |
            cd evaka-infra/terraform/evaka-ecs

            . replace-credentials

            terraform init
            terraform workspace select << parameters.env >>
            terraform apply -auto-approve -lock-timeout=300s \
              -var enduser-api-gw_version="${CIRCLE_SHA1}" \
              -var internal-api-gw_version="${CIRCLE_SHA1}" \
              -var evaka-srv_version="${CIRCLE_SHA1}" \
              -var message-srv_version="${CIRCLE_SHA1}" \
              -var proxy_version="${CIRCLE_SHA1}" \
              -var scheduled-api-calls_version="${CIRCLE_SHA1}" \
              -var ses-notification-processor_version="${CIRCLE_SHA1}"

  # Must be the last step in a job
  notify_slack:
    description: "Notify via Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: master
          # Webhook URL defined as $SLACK_WEBHOOK in CircleCI project settings

jobs:
  checkout_repo:
    executor: apigw_executor
    steps:
      - *restore_repo
      - checkout
      - *store_repo

  fetch_private_dependencies:
    executor: aws_executor
    steps:
      - *restore_repo
      - run: replace-credentials
      - run:
          name: Fetch commercial frontend dependencies
          working_directory: *workspace_frontend
          command: |
            ./init-pro-icons.sh
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - frontend/vendor/fortawesome/*

  clone_infra_repo:
    executor: aws_executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_evaka_fingerprint
      - *attach_workspace
      - run: git clone git@github.com:espoon-voltti/evaka-infra.git
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka-infra

  build_base_image:
    executor: apigw_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - setup_authenticated_remote_docker
      - run:
          name: Build base image
          working_directory: *workspace_evaka_base
          command: ./build.sh
      - run:
          name: Save base image
          working_directory: *workspace_root
          command: docker save evaka-base > evaka-base.tar
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - evaka-base.tar

  apigw_build_and_test:
    executor: apigw_executor
    steps:
      - *restore_repo
      - *restore_apigw_node_modules
      - run:
          working_directory: *workspace_apigw
          command: yarn install --frozen-lockfile
      - *store_apigw_node_modules
      - run:
          working_directory: *workspace_apigw
          command: yarn build
      - *persist_workspace_apigw
      - run:
          working_directory: *workspace_apigw
          command: yarn lint
      - run:
          working_directory: *workspace_apigw
          command: yarn test-ci
      - store_test_results:
          path: /home/circleci/repo/apigw/build/test-reports
      - notify_slack

  apigw_build_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - load_base_image
      - build_docker_image:
          image: evaka/api-gateway
          dir: *workspace_apigw
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - apigw/image.tar
      - notify_slack

  apigw_push_image:
    executor: aws_executor
    steps:
      - *attach_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - push_docker_image:
          image: evaka/api-gateway
          dir: *workspace_apigw
      - notify_slack

  services_deploy_dev:
    executor: aws_executor
    steps:
      - deploy_services:
          env: dev
      - notify_slack

  services_deploy_test:
    executor: aws_executor
    steps:
      - deploy_services:
          env: test
      - notify_slack

  frontend_build_and_test:
    executor: frontend_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - *restore_frontend_node_modules
      - run:
          working_directory: *workspace_frontend
          command: yarn install --frozen-lockfile
      - *store_frontend_node_modules
      - build_frontend:
          dir: /home/circleci/repo/frontend/packages/employee-frontend
      - build_frontend:
          dir: /home/circleci/repo/frontend/packages/enduser-frontend
      - build_frontend:
          dir: /home/circleci/repo/frontend/packages/maintenance-page
      - build_storybook
      - *persist_workspace_frontend
      - run:
          working_directory: *workspace_frontend
          command: yarn lint
      - run:
          working_directory: *workspace_frontend
          command: yarn test --maxWorkers=2
      - store_test_results:
          path: /home/circleci/repo/frontend/packages/lib-common/test-results
      - store_test_results:
          path: /home/circleci/repo/frontend/packages/employee-frontend/test-results
      - store_test_results:
          path: /home/circleci/repo/frontend/packages/enduser-frontend/test-results
      - notify_slack

  e2e-test-application:
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-application
      - notify_slack

  e2e-test-invoicing:
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-invoicing
      - notify_slack

  e2e-test-employee:
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-employee
      - notify_slack

  e2e-test-employee-2:
    executor: e2e_executor
    steps:
      - e2e_test:
          suite: e2e-ci-employee-2
      - notify_slack

  frontend_deploy_dev:
    <<: *deploy_frontend
    environment:
      TARGET_ENV: dev

  frontend_deploy_test:
    <<: *deploy_frontend
    environment:
      TARGET_ENV: test

  frontend_deploy_staging:
    <<: *deploy_frontend
    environment:
      TARGET_ENV: staging

  frontend_deploy_prod:
    <<: *deploy_frontend
    environment:
      TARGET_ENV: prod

  proxy_build_and_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - setup_authenticated_remote_docker
      - build_docker_image:
          image: evaka/proxy
          dir: *workspace_proxy
          push_after: true

  service_build:
    executor: service_executor
    steps:
      - *restore_repo
      - *restore_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew assemble
      - *store_service_gradle
      - *persist_workspace_service
      - run:
          working_directory: *workspace_service
          command: ./gradlew ktlintCheck
      - run:
          working_directory: *workspace_service
          command: ./circle-check-migrations.sh
      - notify_slack

  service_build_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - run:
          name: Unzip executable
          working_directory: *workspace_service
          command: unzip -q build/libs/*.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/service
          dir: *workspace_service
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - service/image.tar
      - notify_slack

  service_test:
    executor: service_test_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - *restore_service_gradle
      - run:
          working_directory: *workspace_service
          command: ./gradlew test
      - store_test_results:
          path: /home/circleci/repo/service/build/test-results/test/
      - login_docker_hub
      - run:
          working_directory: *workspace_service
          command: ./gradlew integrationTest
      - store_test_results:
          path: /home/circleci/repo/service/build/test-results/integrationTest/
      - store_artifacts:
          path: /home/circleci/repo/service/build/reports/
      - store_artifacts:
          path: /home/circleci/repo/service-lib/build/reports/
      - notify_slack

  service_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - push_docker_image:
          image: evaka/service
          dir: *workspace_service
      - notify_slack

  message_service_build:
    executor: message_service_executor
    steps:
      - *restore_repo
      - *restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew assemble
      - *store_message_service_gradle
      - *persist_workspace_message_service
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew ktlintCheck
      - notify_slack

  message_service_test:
    executor: message_service_test_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - *restore_message_service_gradle
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew test
      - store_test_results:
          path: /home/circleci/repo/message-service/build/test-results/test/
      - login_docker_hub
      - run:
          working_directory: *workspace_message_service
          command: ./gradlew integrationTest
      - store_test_results:
          path: /home/circleci/repo/message-service/build/test-results/integrationTest/
      - store_artifacts:
          path: /home/circleci/repo/message-service/build/reports/
      - notify_slack

  message_service_build_and_push_image:
    executor: aws_executor
    steps:
      - *restore_repo
      - *attach_workspace
      - setup_remote_docker:
          version: *remote_docker_version
      - run:
          name: Unzip executable
          working_directory: *workspace_message_service
          command: unzip -q build/libs/*.jar -d target
      - load_base_image
      - build_docker_image:
          image: evaka/message-service
          dir: *workspace_message_service
          push_after: true
      - notify_slack

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_repo:
          context:
            - voltti-dockerhub
      - fetch_private_dependencies:
          context:
            - org-global
          requires:
            - checkout_repo
      - build_base_image:
          context:
            - voltti-dockerhub
          requires:
            - checkout_repo

      - apigw_build_and_test:
          context:
            - voltti-dockerhub
          requires:
            - checkout_repo
      - apigw_build_image:
          context:
            - org-global
          requires:
            - build_base_image
            - apigw_build_and_test
      - apigw_push_image:
          context:
            - org-global
          requires:
            - apigw_build_image

      - frontend_build_and_test:
          context:
            - sentry-release
            - voltti-dockerhub
          requires:
            - fetch_private_dependencies
      - e2e-test-application:
          context:
            - voltti-dockerhub
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image
      - e2e-test-invoicing:
          context:
            - voltti-dockerhub
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image
      - e2e-test-employee:
          context:
            - voltti-dockerhub
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image
      - e2e-test-employee-2:
          context:
            - voltti-dockerhub
          requires:
            - frontend_build_and_test
            - apigw_build_image
            - service_build_image

      - proxy_build_and_push_image:
          context:
            - org-global
            - voltti-dockerhub
          requires:
            - checkout_repo

      - service_build:
          context:
            - voltti-dockerhub
          requires:
            - checkout_repo
      - service_build_image:
          context:
            - org-global
          requires:
            - build_base_image
            - service_build
      - service_test:
          context:
            - voltti-dockerhub
          requires:
            - service_build
      - service_push_image:
          context:
            - org-global
          requires:
            - service_build_image
            - service_test

      - message_service_build:
          context:
            - voltti-dockerhub
          requires:
            - checkout_repo
      - message_service_test:
          context:
            - voltti-dockerhub
          requires:
            - message_service_build
      - message_service_build_and_push_image:
          context:
            - org-global
          requires:
            - build_base_image
            - message_service_test

      - clone_infra_repo:
          context:
            - org-global
          requires:
            - e2e-test-application
            - e2e-test-invoicing
            - e2e-test-employee
            - e2e-test-employee-2
            - apigw_push_image
            - proxy_build_and_push_image
            - service_push_image
            - message_service_build_and_push_image
          filters:
            branches:
              only: master

      - services_deploy_dev:
          context:
            - org-global
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master

      - services_deploy_test:
          context:
            - org-global
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master

      - frontend_deploy_dev:
          context:
            - org-global
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
      - frontend_deploy_test:
          context:
            - org-global
          requires:
            - clone_infra_repo
          filters:
            branches:
              only: master
      - frontend_approve_staging_deploy:
          type: approval
          requires:
            - services_deploy_test
            - frontend_deploy_test
          filters:
            branches:
              only: master
      - frontend_deploy_staging:
          context:
            - org-global
          requires:
            - frontend_approve_staging_deploy
          filters:
            branches:
              only: master
      - frontend_approve_prod_deploy:
          type: approval
          requires:
            - frontend_deploy_staging
          filters:
            branches:
              only: master
      - frontend_deploy_prod:
          context:
            - org-global
          requires:
            - frontend_approve_prod_deploy
          filters:
            branches:
              only: master
