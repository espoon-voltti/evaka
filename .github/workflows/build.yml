name: Build
on:
  pull_request:
  push:
    branches:
    - master

env:
  ECR_REGISTRY: 307238562370.dkr.ecr.eu-west-1.amazonaws.com
  ECR_PUBLIC_REGISTRY: public.ecr.aws/p6g0g5e1
  AWS_REGION: eu-west-1
  # Migrating to this in fugure variable if depndabot uses this
  EXTERNAL_SOURCE: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: espoon-voltti/voltti-actions/shellcheck@v1
      - if: failure()
        uses: espoon-voltti/voltti-actions/notify@v1
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  check-licenses:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Reuse Compliance Check
      uses: fsfe/reuse-action@v1

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build proxy image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        id: build
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/proxy
          path: ./proxy
          push: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
    outputs:
      image: ${{ steps.build.outputs.image }}

  keycloak:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build keycloak image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        id: build
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/keycloak
          path: ./keycloak
          push: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
    outputs:
      image: ${{ steps.build.outputs.image }}

  base:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build base image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        id: build
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/base
          path: ./evaka-base
          push: true
    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}

  yarn:
    needs:
      - base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build yarn image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/yarn
          path: ./evaka-base
          dockerfile: evaka-base/yarn.Dockerfile
          push: true
          build-args: |
            BASE_IMAGE=${{ needs.base.outputs.image }}
          cache_from_images: ${{ needs.base.outputs.image_name }}

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}

  customizations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false

      - name: Write AWS config
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          mkdir -p ~/.aws
          echo '${{ secrets.AWS_CONFIG }}' > ~/.aws/config

      - name: Fetch files
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          aws s3 --profile=voltti-local sync "s3://evaka-deployment-local/build-customizations/" ./espoo-customizations/
          aws s3 --profile=voltti-local sync "s3://evaka-deployment-local/frontend/vendor/fortawesome/" ./vendor/fortawesome/

      - name: Upload customizations
        uses: actions/upload-artifact@v3
        with:
          name: customizations
          path: |
            espoo-customizations/
            vendor/fortawesome/
          retention-days: 1

  frontend:
    needs:
      - customizations
      - base
      - yarn
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download customizations
        uses: actions/download-artifact@v3
        with:
          name: customizations
          path: frontend/

      - name: Build frontend image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/frontend
          path: ./frontend
          build-args: |
            BASE_IMAGE=${{ needs.yarn.outputs.image }}
            SENTRY_PUBLISH_ENABLED=${{ github.ref_name == 'master' && 'true' || 'false' }}
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            ICONS=pro
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.yarn.outputs.image_name }}

      - name: Build frontend builder image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: builder
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/frontend-builder
          path: ./frontend
          target: builder
          build-args: |
            BASE_IMAGE=${{ needs.yarn.outputs.image }}
            SENTRY_PUBLISH_ENABLED=${{ github.ref_name == 'master' && 'true' || 'false' }}
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            ICONS=pro
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.yarn.outputs.image_name }}
            ${{ steps.build.outputs.image_name }}

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  frontend-test:
    needs:
      - base
      - yarn
      - customizations
      - frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_REGISTRY_ROLE }}
          role-duration-seconds: 1200

      - name: Login to ECR
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Lint
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend.outputs.builder_image }}" yarn lint

      - name: Type check
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend.outputs.builder_image }}" yarn type-check

      - name: Test
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend.outputs.builder_image }}" yarn test --maxWorkers=2

      - name: Build and test fork
        id: fork
        if: ${{ github.event.pull_request.head.repo.fork }}
        run: |
          cd ./evaka-base
          ./build.sh
          cd ../frontend
          ./build-docker.sh test

  java:
    needs:
      - base
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build java image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/java
          path: ./evaka-base
          dockerfile: evaka-base/java.Dockerfile
          push: true
          build-args: |
            BASE_IMAGE=${{ needs.base.outputs.image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}

      - if: failure()
        uses: espoon-voltti/voltti-actions/notify@v1
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}

  api-gateway:
    needs:
      - base
      - yarn
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build and run API-gateway tests"
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: test
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/api-gateway-test
          path: ./apigw
          push: false
          load: true
          target: test
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.yarn.outputs.image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.yarn.outputs.image_name }}

      - name: Build API-gateway image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/api-gateway
          path: ./apigw
          push: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.yarn.outputs.image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.yarn.outputs.image_name }}

      - name: Build docker tests and image
        if: ${{ github.event.pull_request.head.repo.fork }}
        run: |
          cd ./evaka-base
          ./build.sh
          cd ../apigw

          ./build-docker.sh test
          ./build-docker.sh
    outputs:
      image: ${{ steps.build.outputs.image }}

  service:
    needs:
      - base
      - java
      - customizations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download customizations
        uses: actions/download-artifact@v3
        with:
          name: customizations
          path: .

      - name: Build Evaka Service image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/service
          path: .
          dockerfile: service/Dockerfile
          push: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.java.outputs.image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.java.outputs.image_name }}

      - name: Build Evaka Service builder image
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: builder
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/service-builder
          target: builder
          path: .
          dockerfile: service/Dockerfile
          push: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.java.outputs.image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.java.outputs.image_name }}
            ${{ steps.build.outputs.image_name }}

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  service-test:
    needs:
      - base
      - java
      - service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build and run Evaka Service tests
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-s3@master
        id: build
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_REGISTRY_ROLE }}
          registry: ${{ env.ECR_REGISTRY }}
          name: evaka/service-test
          path: .
          dockerfile: service/test.Dockerfile
          push: false
          load: true
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.service.outputs.builder_image }}
          cache_from_images: |
            ${{ needs.base.outputs.image_name }}
            ${{ needs.java.outputs.image_name }}
            ${{ needs.service.outputs.builder_image_name }}

      - name: Run service OWASP tests
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          docker run --rm ${{ steps.build.outputs.image }} sh -c "./gradlew --no-daemon dependencyCheckUpdate && ./gradlew --no-daemon dependencyCheckAnalyze"

      - name: Run service tests for fork
        if: ${{ github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          cd ./evaka-base
          ./build.sh
          cd ../service
          ./build-docker.sh test

  service-integration-test:
    needs:
      - java
      - keycloak
      - service
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_chunk_number: [1, 2, 3, 4]
        test_chunk_count: [4] # must max value of above list

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_REGISTRY_ROLE }}
          role-duration-seconds: 1200

      - name: Login to ECR
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Pull compose images
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          export "EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}"
          export "JAVA_BASE_IMAGE=${{ needs.java.outputs.image }}"
          export "EVAKA_SERVICE_BUILDER_IMAGE=${{ needs.service.outputs.builder_image }}"
          cd ./compose
          ./compose-integration pull

      - name: Run service integration tests
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          export "EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}"
          export "JAVA_BASE_IMAGE=${{ needs.java.outputs.image }}"
          export "EVAKA_SERVICE_BUILDER_IMAGE=${{ needs.service.outputs.builder_image }}"
          cd ./compose
          mkdir -p test-results/
          ./compose-integration run integration-test $(../bin/split-integration-tests.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}")
          ./compose-integration logs db_it > test-results/db.log

      - name: Run service integration tests for fork
        if: ${{ github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          cd ./compose
          ./build.sh
          ./compose-integration build
          ./compose-integration run integration-test $(../bin/split-integration-tests.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}")

      - name: Store test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ matrix.test_chunk_number }}
          path: ./compose/test-results/
          retention-days: 2

  e2e:
    needs:
      - service
      - api-gateway
      - proxy
      - keycloak
      - frontend
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        test_chunk_number: [1, 2, 3, 4]
        test_chunk_count: [4] # must max value of above list

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_REGISTRY_ROLE }}
          role-duration-seconds: 1200

      - name: Login to ECR
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Login to public ECR
        if: ${{ !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_PUBLIC_REGISTRY }}

      - name: Prepare e2e tests
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          cd ./compose
          export EVAKA_FRONTEND_IMAGE=${{ needs.frontend.outputs.image }}
          export EVAKA_GW_IMAGE=${{ needs.api-gateway.outputs.image }}
          export EVAKA_SRV_IMAGE=${{ needs.service.outputs.image }}
          export EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}
          ./test-e2e pull

      - name: Run e2e tests
        if: ${{ !github.event.pull_request.head.repo.fork }}
        run: |
          set -eo pipefail
          ./bin/split-test.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}"
          cd ./compose
          export EVAKA_FRONTEND_IMAGE=${{ needs.frontend.outputs.image }}
          export EVAKA_GW_IMAGE=${{ needs.api-gateway.outputs.image }}
          export EVAKA_SRV_IMAGE=${{ needs.service.outputs.image }}
          export EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}
          BUILD=false ./test-e2e run playwright | tee e2e.log

      - name: Run e2e tests for fork
        if: ${{ github.event.pull_request.head.repo.fork }}
        run: |
          set -eo pipefail
          ./bin/split-test.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}"
          cd ./compose
          ./build.sh
          ./test-e2e build
          BUILD=false ./test-e2e run playwright | tee e2e.log

      - name: Get logs
        if: always()
        run: |
          cd compose
          ./test-e2e logs > e2e-all.log

      - name: Store screenshots and logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.test_chunk_number }}
          path: |
            frontend/screenshots/
            frontend/traces/
            compose/e2e.log
            compose/e2e-all.log
          retention-days: 2

  frontend-install:
    if: ${{ !github.event.pull_request.head.repo.fork }}
    needs:
      - frontend
      - frontend-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: dev
          - environment: test
          - environment: staging
          - environment: prod
          - environment: tute
    steps:
      - name: Get branch name
        id: variables
        run: echo "branch=${BRANCH##*/}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Write AWS config
        shell: bash
        run: |
          mkdir -p ~/.aws
          echo '${{ secrets.EVAKA_AWS_CONFIG }}' > ~/.aws/config

      - name: Login to ECR
        shell: bash
        run: |
          aws ecr --profile="voltti-sst" get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Extract frontend files
        run: |
          rm -rf ./frontend-build/
          docker create -ti --name frontend_instance "${{ needs.frontend.outputs.image }}" sh
          docker cp frontend_instance:/static ./frontend-build
          docker rm -f frontend_instance

      - run: |
          cd ./frontend-build/
          if [ "${{ matrix.environment }}" = "prod" ]; then
            echo 'Target environment is prod, excluding source maps from deploy'
            EXTRA_ARGS=(
              '--exclude=*.map'
            )
          fi
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./citizen \
            "s3://evaka-static-${{ matrix.environment }}/frontend/citizen/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./employee \
            "s3://evaka-static-${{ matrix.environment }}/frontend/employee/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./employee/mobile \
            "s3://evaka-static-${{ matrix.environment }}/frontend/employee/mobile/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./maintenance-page \
            "s3://evaka-static-${{ matrix.environment }}/frontend/maintenance-page/${{ github.event.pull_request.head.sha || github.sha }}"
      - run: |
          cat <<EOF>> metadata.yaml
          version: '1'
          updated: '$(date --iso-8601=seconds)'
          sha1: ${{ github.event.pull_request.head.sha || github.sha }}
          branch: ${{ steps.variables.outputs.branch }}
          EOF

          aws s3 cp metadata.yaml "s3://evaka-static-${{ matrix.environment }}/frontend/metadata/${{ github.event.pull_request.head.sha || github.sha }}.yaml" \
            --profile "voltti-${{ matrix.environment }}"

          if [ "${{ github.ref_name }}" = "master" ]; then
            aws s3 cp metadata.yaml s3://evaka-static-${{ matrix.environment }}/frontend/master.metadata.yaml \
              --profile "voltti-${{ matrix.environment }}"
          fi

  ok: # dummy task for pull request
    runs-on: ubuntu-latest
    needs:
      - check-licenses
      - lint-shell
      - frontend-test
      - service-test
      - service-integration-test
      - e2e

    steps:
      - name: OK
        run: echo OK

  deploy:
    if: ${{ github.ref == 'refs/heads/master' && !github.event.pull_request.head.repo.fork }}
    runs-on: ubuntu-latest
    needs:
      - frontend-install
      - service-test
      - service-integration-test
      - api-gateway
      - proxy
      - e2e

    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: dev
          - environment: test

    steps:
      - name: Check out infra
        uses: actions/checkout@v3
        with:
          repository: espoon-voltti/evaka-infra
          ssh-key: '${{ secrets.SSH_KEY }}'
          ref: 'refs/heads/master'

      - name: Get branch name
        id: variables
        run: echo "branch=${BRANCH##*/}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}

      - name: Write AWS config
        shell: bash
        run: |
          mkdir -p ~/.aws
          echo '${{ secrets.AWS_CONFIG_TERRAFORM }}' > ~/.aws/config
          cat << EOF > ~/.aws/credentials
          [voltti-federation]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - uses: espoon-voltti/voltti-actions/tfenv@master

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Prepare frontend
        run: |
          for path in citizen employee employee/mobile maintenance-page; do
            aws s3 sync "s3://evaka-static-${{ matrix.environment }}/frontend/${path}/${{ github.event.pull_request.head.sha || github.sha }}" \
              "s3://evaka-static-${{ matrix.environment }}/${path}" \
              --acl public-read \
              --exact-timestamps \
              --exclude "*index.html" \
              --profile "voltti-${{ matrix.environment }}"
          done

      - name: Prepare Terraform
        working-directory: terraform/evaka-ecs
        run: |
          terraform init
          terraform workspace select "${{ matrix.environment }}"

      - name: Install applications
        working-directory: terraform/evaka-ecs
        run: |
          terraform apply \
              -input=false \
              -auto-approve \
              -lock-timeout=300s \
              -var enduser-api-gw_version="${{ github.event.pull_request.head.sha || github.sha }}" \
              -var internal-api-gw_version="${{ github.event.pull_request.head.sha || github.sha }}" \
              -var evaka-srv_version="${{ github.event.pull_request.head.sha || github.sha }}" \
              -var proxy_version="${{ github.event.pull_request.head.sha || github.sha }}" \
              -var ses-notification-processor_version="${{ github.event.pull_request.head.sha || github.sha }}" > /dev/null 2> /dev/null

      - name: Deploy frontend
        run: |
          for path in citizen employee employee/mobile maintenance-page; do
            aws s3 sync "s3://evaka-static-${{ matrix.environment }}/frontend/${path}/${{ github.event.pull_request.head.sha || github.sha }}" \
              "s3://evaka-static-${{ matrix.environment }}/${path}" \
              --acl public-read \
              --exact-timestamps \
              --exclude '*' \
              --include '*index.html' \
              --profile "voltti-${{ matrix.environment }}"
          done

          cat <<EOF>> deploy.metadata.yaml
          version: '1'
          updated: '$(date --iso-8601=seconds)'
          sha1: ${{ github.event.pull_request.head.sha || github.sha }}
          branch: ${{ steps.variables.outputs.branch }}
          EOF

          aws s3 cp deploy.metadata.yaml "s3://evaka-static-${{ matrix.environment }}/frontend/deploy.metadata.yaml" \
            --profile "voltti-${{ matrix.environment }}"

      - if: always()
        run: rm -rf ~/.aws

      - if: failure()
        uses: espoon-voltti/voltti-actions/notify@v1
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
