# SPDX-FileCopyrightText: 2017-2023 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

name: Build
on:
  pull_request:
  push:
    branches:
    - master
  workflow_dispatch:
    inputs:
      push:
        required: false
        default: 'true'

env:
  AWS_REGION: eu-west-1
  ECR_REGISTRY: 307238562370.dkr.ecr.eu-west-1.amazonaws.com

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read
  packages: write
  actions: read

jobs:
  lint-shell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: espoon-voltti/voltti-actions/shellcheck@v1
      - if: failure()
        uses: espoon-voltti/voltti-actions/notify@v1
        with:
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  check-licenses:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Reuse Compliance Check
      uses: fsfe/reuse-action@v1

  proxy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build proxy image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: build
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/proxy
          path: ./proxy
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

    outputs:
      image: ${{ steps.build.outputs.image }}

  keycloak:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}

      - name: Build keycloak image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: build
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/keycloak
          path: ./keycloak
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

    outputs:
      image: ${{ steps.build.outputs.image }}

  frontend-common:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy customizations
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          cd frontend
          cp -rp ../espoo-customizations .

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS: false

      - name: Build frontend image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: build
        with:
          registry: ghcr.io/espoon-voltti
          name: evaka/frontend-common
          path: ./frontend
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            SENTRY_PUBLISH_ENABLED=false
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            ICONS=free

      - name: Build frontend image builder
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: builder
        with:
          registry: ghcr.io/espoon-voltti
          name: evaka/frontend-common-builder
          cache_from: ${{ steps.build.outputs.image_cache }}
          path: ./frontend
          target: builder
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            SENTRY_PUBLISH_ENABLED=false
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            ICONS=free

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache fortawesome
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: fortawesome
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: fortawesome-${{ hashFiles('frontend/setup-pro-icons.sh') }}

      - uses: actions/setup-node@v3
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork && steps.fortawesome.outputs.cache-hit != 'true' }}
        with:
          node-version: 18

      - name: Install fortawesome
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork && steps.fortawesome.outputs.cache-hit != 'true' }}
        run: |
          cat << EOF > frontend/.npmrc
          @fortawesome:registry=https://npm.fontawesome.com/
          //npm.fontawesome.com/:_authToken="${{ secrets.FONTAWESOME_TOKEN }}"
          EOF
          ./frontend/setup-pro-icons.sh
          rm frontend/.npmrc

      - name: Copy customizations
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          mkdir -p frontend/espoo-customizations/
          cp -rp customizations/espoo/* frontend/espoo-customizations/

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}

      - name: Build frontend image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: build
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/frontend
          path: ./frontend
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            SENTRY_PUBLISH_ENABLED=${{ github.ref_name == 'master' && 'true' || 'false' }}
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            ICONS=pro
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}

  frontend-test:
    needs:
      - frontend-common
      - frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend-common.outputs.builder_image }}" yarn lint

      - name: Type check
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend-common.outputs.builder_image }}" yarn type-check

      - name: Test
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: docker run --rm "${{ needs.frontend-common.outputs.builder_image }}" yarn test --maxWorkers=2

      - name: Build and test fork
        id: fork
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          cd ./frontend
          ./build-docker.sh test

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

  api-gateway:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}

      - name: Build and run API-gateway tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: test
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/api-gateway-test
          path: ./apigw
          push: false
          load: true
          target: test
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Build API-gateway image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: build
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/api-gateway
          path: ./apigw
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Build docker tests and image on fork
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          cd ./apigw
          ./build-docker.sh test
          ./build-docker.sh

    outputs:
      image: ${{ steps.build.outputs.image }}

  service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy customizations
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          rm -r espoo-customizations/
          cp -rp customizations/espoo/ espoo-customizations/

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}

      - name: Build Evaka Service image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: build
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/service
          path: .
          dockerfile: service/Dockerfile
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Build Evaka Service builder image
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: builder
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/service-builder
          target: builder
          cache_from: ${{ steps.build.outputs.image_cache }}
          path: .
          dockerfile: service/Dockerfile
          push: ${{ inputs.push || 'true' }}
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

    outputs:
      image: ${{ steps.build.outputs.image }}
      image_name: ${{ steps.build.outputs.image_name }}
      builder_image: ${{ steps.builder.outputs.image }}
      builder_image_name: ${{ steps.builder.outputs.image_name }}

  service-test:
    needs:
      - service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker building
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: setup
        uses: espoon-voltti/voltti-actions/docker-setup@master
        with:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ROLE: ${{ secrets.AWS_ROLE }}

      - name: Build and run Evaka Service tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: espoon-voltti/voltti-actions/docker-build-registry@master
        id: build
        with:
          registry: ${{ steps.setup.outputs.ecr_registry }}
          name: evaka/service-test
          path: .
          dockerfile: service/test.Dockerfile
          push: false
          load: true
          tcpdump: "true"
          tcpdump_password: "${{ secrets.TCPDUMP_PASSWORD }}"
          build-args: |
            build=${{ github.run_number }}
            commit=${{ github.event.pull_request.head.sha || github.sha }}
            BASE_IMAGE=${{ needs.service.outputs.builder_image }}

      - name: Run service tests for fork
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          cd ./service
          ./build-docker.sh test

      - name: Docker cleanup
        if: always()
        uses: espoon-voltti/voltti-actions/docker-cleanup@master

  owasp:
    needs:
      - service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run service OWASP tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          docker run --rm ${{ needs.service.outputs.builder_image }} sh -c "./gradlew --no-daemon dependencyCheckUpdate && ./gradlew --no-daemon dependencyCheckAnalyze"

  service-integration-test:
    needs:
      - keycloak
      - service
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_chunk_number: [1, 2, 3, 4]
        test_chunk_count: [4] # must max value of above list

    steps:
      - uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        if: ${{ !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull compose images
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          export "EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}"
          export "EVAKA_SERVICE_BUILDER_IMAGE=${{ needs.service.outputs.builder_image }}"
          cd ./compose
          ./compose-integration pull

      - name: Run service integration tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          export "EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}"
          export "EVAKA_SERVICE_BUILDER_IMAGE=${{ needs.service.outputs.builder_image }}"
          cd ./compose
          mkdir -p test-results/
          ./compose-integration run integration-test $(../bin/split-integration-tests.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}")
          ./compose-integration logs db > test-results/db.log

      - name: Run service integration tests for fork
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        shell: bash
        run: |
          ./service/build-docker.sh
          cd ./compose
          ./compose-integration build
          ./compose-integration run integration-test $(../bin/split-integration-tests.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}")

      - name: Store test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ matrix.test_chunk_number }}
          path: ./compose/test-results/
          retention-days: 2

  e2e:
    needs:
      - service
      - api-gateway
      - proxy
      - keycloak
      - frontend
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        test_chunk_number: [1, 2, 3, 4, 5, 6]
        test_chunk_count: [6] # must max value of above list
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Login to Amazon ECR
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Login to Amazon ECR Public
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        id: ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: "us-east-1"
        with:
          registry-type: public

      - name: Prepare e2e tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        run: |
          cd ./compose
          export EVAKA_FRONTEND_IMAGE=${{ needs.frontend.outputs.image }}
          export EVAKA_GW_IMAGE=${{ needs.api-gateway.outputs.image }}
          export EVAKA_SRV_IMAGE=${{ needs.service.outputs.image }}
          export EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}
          ./test-e2e pull

      - name: Run e2e tests
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eo pipefail
          ./bin/timings.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}" | tee -a frontend/playwright-filenames.txt
          cd ./compose
          export EVAKA_FRONTEND_IMAGE=${{ needs.frontend.outputs.image }}
          export EVAKA_GW_IMAGE=${{ needs.api-gateway.outputs.image }}
          export EVAKA_SRV_IMAGE=${{ needs.service.outputs.image }}
          export EVAKA_KEYCLOAK_IMAGE=${{ needs.keycloak.outputs.image }}
          BUILD=false ./test-e2e run playwright | tee e2e.log

      - name: Run e2e tests for fork
        if: ${{ github.actor == 'dependabot[bot]' || github.event.pull_request.head.repo.fork }}
        run: |
          set -eo pipefail
          ./bin/split-test.sh "${{ matrix.test_chunk_number }}" "${{ matrix.test_chunk_count }}"
          cd ./compose
          ./build.sh
          ./test-e2e build
          BUILD=false ./test-e2e run playwright | tee e2e.log

      - name: Get logs
        if: always()
        run: |
          cd compose
          ./test-e2e logs > e2e-all.log

      - name: Store screenshots and logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results-${{ matrix.test_chunk_number }}
          path: |
            frontend/screenshots/
            frontend/traces/
            compose/e2e.log
            compose/e2e-all.log
          retention-days: 2

  frontend-install:
    if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork && inputs.push != 'false' }}
    needs:
      - frontend
      - frontend-test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: dev
          - environment: staging
          - environment: prod
          - environment: tute
    steps:
      - name: Get branch name
        id: variables
        run: echo "branch=${BRANCH##*/}" >> $GITHUB_OUTPUT
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 1200

      - name: Write AWS config
        shell: bash
        run: |
          mkdir -p ~/.aws
          echo '${{ secrets.EVAKA_AWS_CONFIG }}' > ~/.aws/config

      - name: Login to ECR
        shell: bash
        run: |
          aws ecr --profile="voltti-sst" get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Extract frontend files
        run: |
          rm -rf ./frontend-build/
          docker create -ti --name frontend_instance "${{ needs.frontend.outputs.image }}" sh
          docker cp frontend_instance:/static ./frontend-build
          docker rm -f frontend_instance

      - run: |
          cd ./frontend-build/
          if [ "${{ matrix.environment }}" = "prod" ]; then
            echo 'Target environment is prod, excluding source maps from deploy'
            EXTRA_ARGS=(
              '--exclude=*.map'
            )
          fi
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./citizen \
            "s3://evaka-static-${{ matrix.environment }}/frontend/citizen/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./employee \
            "s3://evaka-static-${{ matrix.environment }}/frontend/employee/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./employee/mobile \
            "s3://evaka-static-${{ matrix.environment }}/frontend/employee/mobile/${{ github.event.pull_request.head.sha || github.sha }}"
          aws --profile="voltti-${{ matrix.environment }}" s3 sync --exact-timestamps "${EXTRA_ARGS[@]}" \
            ./maintenance-page \
            "s3://evaka-static-${{ matrix.environment }}/frontend/maintenance-page/${{ github.event.pull_request.head.sha || github.sha }}"
      - run: |
          cat <<EOF>> metadata.yaml
          version: '1'
          updated: '$(date --iso-8601=seconds)'
          sha1: ${{ github.event.pull_request.head.sha || github.sha }}
          branch: ${{ steps.variables.outputs.branch }}
          EOF

          aws s3 cp metadata.yaml "s3://evaka-static-${{ matrix.environment }}/frontend/metadata/${{ github.event.pull_request.head.sha || github.sha }}.yaml" \
            --profile "voltti-${{ matrix.environment }}"

          if [ "${{ github.ref_name }}" = "master" ]; then
            aws s3 cp metadata.yaml s3://evaka-static-${{ matrix.environment }}/frontend/master.metadata.yaml \
              --profile "voltti-${{ matrix.environment }}"
          fi

  tag:
    if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
    runs-on: ubuntu-latest
    needs:
      - service-test
      - service-integration-test
      - e2e
      - frontend-test
      - lint-shell
      - check-licenses
    steps:
      - name: Configure AWS credentials
        if: ${{ github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-duration-seconds: 1200

      - name: Docker metadata # Used to get the tag from DOCKER_METADATA_OUTPUT_VERSION
        id: metadata
        env:
          DOCKER_METADATA_PR_HEAD_SHA: "true"
        uses: docker/metadata-action@v4
        with:
          images: |
            evaka/dummy
          tags: |
            type=ref,event=pr,prefix=pr-
            type=ref,event=branch,prefix=

      - name: Retag with branch
        run: |
          if test -z "$DOCKER_METADATA_OUTPUT_VERSION"; then
            echo "Empty tag"
            exit 1
          fi

          for repository in evaka/proxy evaka/keycloak evaka/frontend evaka/service evaka/api-gateway; do
            MANIFEST=$(aws ecr batch-get-image --repository-name "$repository" --image-ids imageTag="cache-$DOCKER_METADATA_OUTPUT_VERSION" --output json | jq --raw-output --join-output '.images[0].imageManifest')
            aws ecr put-image --repository-name "$repository" --image-tag "${DOCKER_METADATA_OUTPUT_VERSION}" --image-manifest "$MANIFEST"
          done

  deploy:
    if: ${{ github.ref == 'refs/heads/master' && github.actor != 'dependabot[bot]' && !github.event.pull_request.head.repo.fork }}
    env:
      DEPLOY_REPO_OWNER: 'espoon-voltti'
      DEPLOY_REPO_NAME: 'evaka-deploy'
      DEPLOY_REPO_WORKFLOW: 'deploy.yml'
    runs-on: ubuntu-latest
    needs:
      - tag
      - frontend-install
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: '${{ secrets.EVAKA_PAT }}'
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: '${{ env.DEPLOY_REPO_OWNER }}',
              repo: '${{ env.DEPLOY_REPO_NAME }}',
              workflow_id: '${{ env.DEPLOY_REPO_WORKFLOW }}',
              ref: 'master',
              inputs: {
                version: '${{ github.event.pull_request.head.sha || github.sha }}'
              }
            })
