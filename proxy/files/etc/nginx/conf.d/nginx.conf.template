# SPDX-FileCopyrightText: 2017-2021 City of Espoo
#
# SPDX-License-Identifier: LGPL-2.1-or-later

# Hide version information
server_tokens off;

# DNS resolver in a AWS VPC: https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html
resolver 169.254.169.253;

# Helper for check content-type for static file error handler.
# Should always be ~text/html.
map $content_type $content_type_not_ok {
  default "0";
  ~text/html "1";
}

# Helper for cache expiration.
# Never cache "text/html" as it should always contains references to
# the latest resources (that can be cached, with their hashed names).
map $sent_http_content_type $expires {
  default                    off;
  text/html                  -1;
  text/css                   max;
  application/javascript     max;
  application/woff2          max;
  ~image/                    max;
}

# Extra Cache-Control header values based on response content type.
# Enhances expires directive's functionality with "no-store" for "text/html".
map $sent_http_content_type $cache_control {
  default   '';
  text/html 'no-store';
}

# Map nginx's request_time which is presented in seconds with a millisecond precision ("10.3 format")
# to milliseconds.
# 0.000 is a special case for static responses (e.g. health checks)
# Strip all prefixing zeroes.
#
# TODO: This should be done externally from nginx but currently we feed logs directly to Elasticsearch via Functionbeat,
# so there's nowhere to format logs before ES.
map $request_time $request_time_ms {
  "0.000"       0;
  ~^0\.(0*)(.*) $2;
  ~(.*)\.(.*)   $1$2;
}

real_ip_header X-Forwarded-For;
set_real_ip_from 0.0.0.0/0;

# Global rate limiting

# Set $limit to 0 if client's IP address matches whitelisted CIDR(s).
geo $limit {
  default 1;
<% (ENV["RATE_LIMIT_CIDR_WHITELIST"] || "").split(";").each do |cidr| %>
  <%= cidr %> 0;
<% end %>
}

# If $limit matched to a whitelisted CIDR,
# $limit_key will be set to and empty string,
# otherwise $limit_key key will be the client's IP address in binary format.
map $limit $limit_key {
  0 "";
  1 $binary_remote_addr;
}

# When $limit_key is an empty string (whitelisted CIDR), the first limit_req_zone
# WON'T be applied. That means all whitelisted CIDR(s) are handled by the second
# limit_req_zone with a higher limit, as $binary_remote_addr is always defined.
# The more restrictive limit is applied, so even though all clients will match
# the second limit_req_zone, the first will be applied to non-whitelisted clients.
limit_req_zone $limit_key zone=req_zone:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=req_zone_wl:1m rate=100r/s;

# Logging

# As nginx does not currently have a built-in variable for outputting ISO 8601
# timestamps with millisecond resolution, generate it manually from
# $time_iso8601 and $msec (which is in ms resolution but as seconds).
#
# This is less performant than the alternative of having an external tool like
# Functionbeat or Logstash ingest the timestamps in another format but
# shouldn't matter in eVaka's context + has the benefit of being human-readable
# in its raw format.
#
# Source: https://thatsamguy.com/nginx-iso8601-time-format/
map $time_iso8601 $time_iso8601_p1 {
  ~([^+]+) $1;
}
map $time_iso8601 $time_iso8601_p2 {
  ~\+([0-9:]+)$ $1;
}
map $msec $millisec {
  ~\.([0-9]+)$ $1;
}

# Output logs in accordance to eVaka's log schema (type app-requests-received).
# NOTE: userIdHash cannot easily be computed here, so left empty.
log_format json_access escape=json
  '{'
    '"@timestamp":"$time_iso8601_p1.$millisec+$time_iso8601_p2",'
    '"appBuild":"<%= ENV["APP_BUILD"] %>",'
    '"appCommit":"<%= ENV["APP_COMMIT"] %>",'
    '"appName":"evaka-proxy",'
    '"clientIp":"$remote_addr",'
    '"contentLength":$bytes_sent,'
    '"env":"<%= ENV["NGINX_ENV"] %>",'
    '"hostIp":"<%= ENV["HOST_IP"] %>",'
    '"httpMethod":"$request_method",'
    '"path":"$uri",'
    '"queryString":"$query_string",'
    '"responseTime":$request_time_ms,'
    '"spanId":"$request_id",'
    '"statusCode":"$status",'
    '"traceId":"$request_id",'
    '"type":"app-requests-received",'
    '"userIdHash":"",'
<% if ENV["DD_PROFILING_ENABLED"] == "true" %>
    '"dd.trace_id":"$opentracing_context_x_datadog_trace_id",'
    '"dd.span_id":"$opentracing_context_x_datadog_parent_id",'
<% end %>
    '"version":1'
  '}';

server {
  # Basic configs

  listen 8080;
  server_name _;
  port_in_redirect off;

  # Logging
  # NOTE: All log files are symlinked to redirect to stdout

  access_log /var/log/nginx/access.log json_access;

  # Security

  # Add response headers. N.B. Never use add_header directive in
  # a location bloc as it overrides the parent headers
  add_header Strict-Transport-Security 'max-age=31536000; includeSubdomains; preload';
  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection '1; mode=block';
  add_header X-DNS-Prefetch-Control off;
  add_header Report-To '{"group","csp-endpoint","max_age":31536000,"endpoints":[{"url":"https://$host/api/csp"}]}';

  set $contentSecurityPolicyBase "block-all-mixed-content; upgrade-insecure-requests; default-src 'self'; font-src 'self' data:; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://a.tile.openstreetmap.org https://b.tile.openstreetmap.org https://c.tile.openstreetmap.org; connect-src 'self' https://o318158.ingest.sentry.io https://api.digitransit.fi; object-src 'none'; report-uri /api/csp; report-to csp-endpoint";
  add_header Content-Security-Policy "${contentSecurityPolicyBase}; script-src 'self'; frame-ancestors 'none'; form-action 'self';";

  # Tracing
  # Return the request ID to the client to make tracing of test requests very easy
  add_header X-Request-ID $request_id always;

  # Caching

  # Sets Expires and Cache-Control headers
  expires       $expires;
  # Add additional Cache-Control headers
  add_header    Cache-Control $cache_control;
  # Gzipping to minimize network traffic
  gzip          on;
  gzip_vary     on;
  gzip_types    text/plain text/css application/javascript text/xml application/xml image/svg+xml;

  # Rate limiting
  # for whole server block

  # Bursting allows for, well... bursting:
  # it allows requests to temporarily go over their rate limit
  # and be placed into a queue.
  # For nodelay, see: https://www.nginx.com/blog/rate-limiting-nginx/#Queueing-with-No-Delay
  # Also allow higher burst limit for whitelisted zone.
  limit_req         zone=req_zone burst=20 nodelay;
  limit_req         zone=req_zone_wl burst=50 nodelay;
  limit_req_status  429;

  ############################
  # Well-known & common routes
  ############################

  location /health {
    access_log  off;
    return      200;
  }

  <% unless ENV["SECURITYTXT_CONTACTS"].to_s.empty? %>
  # Contact: A link or e-mail address for people to contact you about security issues. Remember to include "https://" for URLs, and "mailto:" for e-mails.
  set $contact            "<% (ENV["SECURITYTXT_CONTACTS"] || "").split(";").each do |c| %>Contact: <%= c %>\n<% end %>";
  # Preferred-Languages: A comma-separated list of language codes that your security team speaks. You may include more than one language.
  set $preferredlanguages "Preferred-Languages: <% unless ENV["SECURITYTXT_LANGUAGES"].to_s.empty? %><%= ENV["SECURITYTXT_LANGUAGES"] %><% else %><%= "en" %><% end %>\n";
  set $securitytxt        "${contact}${preferredlanguages}";
  location /.well-known/security.txt {
    add_header Content-Type text/plain;
    return 200 $securitytxt;
  }
  <% end %>

  ####################
  # Application routes
  ####################

  # STATIC FILE ROUTING
  set $staticEndpoint "<%= ENV["STATIC_FILES_ENDPOINT_URL"] %>";

  rewrite ^/employee$ https://$host/employee/;
  rewrite ^/admin$ https://$host/employee/;
  rewrite ^/manager$ https://$host/employee/;

  location / {
    rewrite ^ /citizen$request_uri break;
    try_files $uri @static;
  }

  location /employee/ {
    try_files $uri @static;
  }
  location /admin/ {
    return 301 https://$host/employee;
  }
  location /manager/ {
    return 301 https://$host/employee;
  }

  location ~ /employee/mobile/manifest\.([a-z0-9]+)\.json$ {
    proxy_set_header        Authorization '';
    proxy_hide_header       x-amz-id-2;
    proxy_hide_header       x-amz-request-id;
    proxy_hide_header       Set-Cookie;
    proxy_ignore_headers    Set-Cookie;

    proxy_pass              $staticEndpoint;

    auth_basic off;
  }

  location @static {
    proxy_set_header        Authorization '';
    proxy_hide_header       x-amz-id-2;
    proxy_hide_header       x-amz-request-id;
    proxy_hide_header       Set-Cookie;
    proxy_ignore_headers    Set-Cookie;

    proxy_pass              $staticEndpoint;
    proxy_intercept_errors  on;
    error_page 404 = @staticErrorHandler;
  }

  location @staticErrorHandler {
    if ($content_type_not_ok) {
      return 404;
    }

    rewrite     /employee/mobile/(.*) /employee/mobile/index.html break;
    rewrite     /employee/(.*) /employee/index.html break;
    rewrite     /citizen/(.*) /citizen/index.html break;
    proxy_pass  $staticEndpoint;
  }

  # API ROUTING
  set $enduserUrl "<%= ENV["ENDUSER_GW_URL"] %>";
  set $internalUrl "<%= ENV["INTERNAL_GW_URL"] %>";

  location /api/application {
    include     proxy_params;
    proxy_pass  $enduserUrl;

    location /api/application/attachments {
      client_max_body_size 100m;
      proxy_pass  $enduserUrl;
    }
  }

  location /api/internal {
    include     proxy_params;
    proxy_pass  $internalUrl;

    location /api/internal/attachments {
      client_max_body_size 100m;
      proxy_pass  $internalUrl;
    }
  }

  # Direct all CPS reports to internal endpoint /api/csp/csp-report
  location /api/csp {
    include     proxy_params;
    proxy_pass  $internalUrl/api/csp/csp-report;
  }

  <% if ENV.key?("KEYCLOAK_CONFIGURATION") && ENV["KEYCLOAK_CONFIGURATION"] != "" %>
  <%= ENV["KEYCLOAK_CONFIGURATION"] %>
  <% elsif ENV.key?("KEYCLOAK_URL") && ENV["KEYCLOAK_URL"] != "" %>
  # KeyCloak configuration with separate environment variables.
  # Used as backwards combability and can be removed in future.
  set $authUrl "<%= ENV["KEYCLOAK_URL"] %>";
  set $formActionUrl "<%= ENV["FORM_ACTION_URL"] %>";

  location /auth {
    <% if ENV.key?("KEYCLOAK_PARAMETERS") && ENV["KEYCLOAK_PARAMETERS"] != "" %>
    <%= ENV["KEYCLOAK_PARAMETERS"] %>
    <% end %>

    <% if ENV["BASIC_AUTH_ENABLED"] == "true" %>
    auth_basic "off";
    <% end %>

    limit_req  zone=req_zone burst=100 nodelay;

    add_header Content-Security-Policy "${contentSecurityPolicyBase}; script-src 'self' 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self'; form-action 'self' ${formActionUrl}";

    proxy_ssl_verify off;

    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For "$http_x_forwarded_for, $realip_remote_addr";
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Original-Forwarded-Proto "https";
    proxy_set_header X-Request-ID $request_id;
    proxy_set_header Host $http_host;

    # Actual caching headers should be set by downstream API Gateways;
    # this is just to prevent caching at the proxy level.
    proxy_no_cache 1;
    proxy_set_header X-Forwarded-Proto "https";

    proxy_pass $authUrl;

    proxy_buffer_size 32k;
    proxy_buffers 8 32k;
    proxy_busy_buffers_size 64k;
  }
  <% end %>

  <% if ENV["BASIC_AUTH_ENABLED"] == "true" %>
  auth_basic            "Log in";
  auth_basic_user_file  "/etc/nginx/.htpasswd";
  <% end %>
}

<% if ENV.key?("SERVICE_DOMAIN_SV") && ENV.key?("SERVICE_DOMAIN") %>
server {
    listen 8080;
    server_name <%= ENV["SERVICE_DOMAIN_SV"] %>;

    access_log /var/log/nginx/access.log json_access;

    add_header Strict-Transport-Security 'max-age=31536000; includeSubdomains; preload';
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection '1; mode=block';
    add_header X-DNS-Prefetch-Control off;

    rewrite ^ https://<%= ENV["SERVICE_DOMAIN"] %>$uri?lang=sv redirect;
}
<% end %>
